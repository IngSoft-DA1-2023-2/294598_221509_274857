@page "/home/{Id:int}/{Correo}/CrearCuentaCredito"

<PageTitle>FinTrac Crear Cuenta de Crédito</PageTitle>
<TituloRosado Titulo="Crear Cuenta de Crédito"
			  Subtitulo="Creé la cuenta de crédito que deseé recuerde que el numero de tarjeta son 4 dígitos y monto debe ser mayor a 0."></TituloRosado>
<EspacioActual></EspacioActual>

<form>
	<table>
		<tr>
			<td><label for="bancoEmisor">Banco Emisor:</label></td>
			<td>
				<input type="text" class="form-control" id="bancoEmisor" placeholder="Banco Emisor"
				@bind="BancoEmisor">
			</td>
		</tr>
		<tr>
			<td><label for="numeroTarjeta">Número de Tarjeta:</label></td>
			<td>
				<input type="text" class="form-control" id="numeroTarjeta" placeholder="Número de tarjeta"
				@bind="NumeroTarjeta">
			</td>
		</tr>
		<tr>
			<td><label for="creditoDisponible">Crédito Disponible:</label></td>
			<td>
				<input type="number" class="form-control" id="creditoDisponible" placeholder="Crédito disponible"
				@bind="CreditoDisponible">
			</td>
		</tr>
		<tr>
			<td><label for="moneda">Moneda:</label></td>
			<td>
				<select @onchange="SeleccionarMoneda" class="text-600">
					@foreach (var moneda in monedas)
					{
						<option value="@moneda">@moneda</option>
					}
				</select>
			</td>
		</tr>
		<tr>
			<td><label for="fechaCierre">Fecha de Cierre:</label></td>
			<td><input type="date" class="form-control" id="fechaCierre" @bind="FechaCierre"></td>
		</tr>
	</table>
	<button type="button" class="text-white bg-gradient-to-br from-pink-500 to-orange-400 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-pink-200 dark:focus:ring-pink-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2"
	@onclick="CrearCuenta">
		Crear Cuenta de Crédito
	</button>
</form>

<p style="color:red">@ErrorMsg</p>

@code {
	[Parameter] public int Id { get; set; }
	[Parameter] public string Correo { get; set; }
	private string ErrorMsg { get; set; } = "";
	private string BancoEmisor { get; set; } = "";
	private string NumeroTarjeta { get; set; } = "";
	private double CreditoDisponible { get; set; } = 0;
	private DateTime FechaCierre { get; set; } = DateTime.Now;
	private TipoCambiarioDTO tipoMonedaSeleccionado;
	private List<TipoCambiarioDTO> monedas;
	private ControladorCuenta controlador;

	protected override void OnInitialized()
	{
		monedas = Enum.GetValues(typeof(TipoCambiarioDTO)).Cast<TipoCambiarioDTO>().ToList();
		controlador = new ControladorCuenta(UsuarioLogic, EspacioLogic);
	}

	private void SeleccionarMoneda(ChangeEventArgs e)
	{
		tipoMonedaSeleccionado = (TipoCambiarioDTO)Enum.Parse(typeof(TipoCambiarioDTO), e.Value.ToString());
	}

	private void CrearCuenta()
	{

		CreditoDTO credito = new CreditoDTO()
			{
				BancoEmisor = BancoEmisor,
				NumeroTarjeta = NumeroTarjeta,
				Saldo = CreditoDisponible,
				FechaCierre = FechaCierre,
				Moneda = tipoMonedaSeleccionado
			};

		ErrorMsg = controlador.CrearCredito(Persistencia.Id, credito);
		if (ErrorMsg == "")
		{
			NavigationManager.NavigateTo($"/home/{Id}/{Correo}/Cuentas");
		};
	}
}