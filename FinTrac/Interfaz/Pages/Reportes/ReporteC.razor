@page "/home/{Id:int}/{Correo}/ReporteC"
@inject NavigationManager NavigationManager;
@using BussinesLogic
@using Domain
@inject UsuarioLogic UsuarioLogic;
@inject EspacioLogic EspacioLogic;
@inject Persistencia Persistencia;
@inject ControladorReporte controladorReporte;
@inject ControladorCuenta controladorCuenta;
@inject ControladorCategorias controladorCategoria;
@inject ControladorCambios controladorCambios;

<PageTitle>FinTrac Reportes</PageTitle>
<TituloRosado Titulo="Listado de Gastos por Categoria" Subtitulo=""></TituloRosado>

<div class="mt-4">
	<div style="flex-grow: 1; padding-bottom:15px" class="flex flex-col space-y-2">
		<label for="categorySelector" class="text-sm font-medium text-gray-500">Seleccione una Categoria:</label>
		<select @bind="catElegida" id="accontSelector" name="mes">
			<option value="" selected>Seleccione una Opcion</option>
			@foreach (CategoriaDTO categoria in categorias)
			{
				@if (categoria.EstadoActivo && categoria.Tipo.Equals(TipoCategoria.Costo))
				{
					<option value="@categoria.Nombre">@categoria.Nombre - @categoria.Tipo</option>
				}
			}
		</select>
	</div>

	<div style="display:flex; flex-direction:row">
		<div style="flex-grow: 1; padding-bottom:15px; justify-content:flex-start" class="flex flex-col space-y-2">
			<label for="dateSelector" class="text-sm font-medium text-gray-500">Seleccione una Fecha Inicial:</label>
			<input id="dateSelector" type="date" @bind="fechaInicio" style="width: 40%; position:relative;" />
		</div>
		<div style="flex-grow: 1; padding-bottom:15px; justify-content:flex-end; right:0%;" class="flex flex-col space-y-2">
			<label for="dateSelector" class="text-sm font-medium text-gray-500">Seleccione una Fecha Final:</label>
			<input id="dateSelector" type="date" @bind="fechaFin" style="width: 40%; position:relative;" />
		</div>
	</div>

	<div style="flex-grow: 1; padding-bottom:15px" class="flex flex-col space-y-2">
		<label for="accountSelector" class="text-sm font-medium text-gray-500">Seleccione una Cuenta:</label>
		<select @bind="cuentaElegida" id="accontSelector" name="mes">
			<option value="" selected>Seleccione una Opcion</option>
			@foreach (CuentaDTO accountFiltro in cuentas)
			{
				@if (accountFiltro is AhorroDTO)
				{
					<option value="@(((AhorroDTO)accountFiltro).Nombre)">@(((AhorroDTO)accountFiltro).Nombre) - @(((AhorroDTO)accountFiltro).Moneda) </option>
				} else
				{
					<option value="@(((CreditoDTO)accountFiltro).NumeroTarjeta)-@(((CreditoDTO)accountFiltro).BancoEmisor)"> @(((CreditoDTO)accountFiltro).NumeroTarjeta) - @(((CreditoDTO)accountFiltro).Moneda) - @(((CreditoDTO)accountFiltro).BancoEmisor)</option>
				}
			}
		</select>
	</div>

	<a style="position:relative; flex-grow:1; cursor:pointer; width:50%; left:23%; align-items:center; justify-content:center; display: flex; font-size: 25px" class="text-white bg-gradient-to-br from-pink-500 to-orange-400 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-pink-200 dark:focus:ring-pink-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2" @onclick="generarLista">Generar Reporte</a>

	<div class="flex flex-col space-y-2">
		@if (listaGastos.Count == 0)
		{
			@if (primeraVez)
			{
				<div style="border: solid; border-color: #d4d4d4; width: 23%; border-radius:9px; position:relative; align-items:center; justify-content:center; left:37%">
					<h1 style="padding-left:6px">Ingrese los datos para filtrar la lista.</h1>
				</div>
			} else
			{
				<div style="border: solid; border-color: #d4d4d4; width: 32%; border-radius:9px; left:0%; position:relative; align-items:center; justify-content:center; left:32%">
					<h1 style="padding-left:6px">No hay transacciones que permitan esta operacion.</h1>
				</div>
			}
		} else
		{
			<table class="min-w-full divide-y divide-gray-200">
				<thead class="bg-gray-50">
					<tr>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
							Titulo Transaccion
						</th>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
							Moneda
						</th>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
							Monto Usado $
						</th>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
							Valor Moneda - Monto Usado
						</th>
					</tr>
				</thead>
				<tbody class="bg-white divide-y divide-gray-200">
					@foreach (TransaccionDTO gasto in listaGastos)
					{
						if (gasto.Moneda != TipoCambiarioDTO.PesosUruguayos)
						{
							<tr>
								<td class="px-6 py-4 whitespace-nowrap">
									@gasto.Titulo
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									@gasto.Moneda
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									$@(gasto.Monto * encontrarCambio(gasto, cambios).Pesos)
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									@if (encontrarCambio(gasto, cambios).Moneda.Equals(TipoCambiario.Dolar))
									{
										<div>$@encontrarCambio(gasto, cambios).Pesos -  U$D @gasto.Monto</div>
									} else
									{
										<div>$@encontrarCambio(gasto, cambios).Pesos -  Є @gasto.Monto</div>
									}
								</td>
							</tr>
						} else
						{
							<tr>
								<td class="px-6 py-4 whitespace-nowrap">
									@gasto.Titulo
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									@gasto.Moneda
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									$@(gasto.Monto)
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									
								</td>
							</tr>
						}
					}
				</tbody>
			</table>
		}
	</div>
</div>

@code {
	[Parameter] public int Id { get; set; }
	[Parameter] public string Correo { get; set; }
	public string ErrorMsg { get; set; }
	public List<TransaccionDTO> listaGastos { get; set; }
	public CategoriaDTO categoriaFiltro { get; set; }
	public DateTime fechaInicio { get; set; } = DateTime.Now;
	public DateTime fechaFin { get; set; } = DateTime.Now;
	public CuentaDTO cuentaFiltro { get; set; }
	bool primeraVez = true;
	public List<CategoriaDTO> categorias = new List<CategoriaDTO>();
	public List<CuentaDTO> cuentas = new List<CuentaDTO>();
	public List<CambioDTO> cambios = new List<CambioDTO>();
	public string catElegida { get; set; }
	public string cuentaElegida { get; set; }
	public string[] arrayCuenta { get; set; }


	private void generarLista()
	{
		arrayCuenta = cuentaElegida.Split('-');
		if (arrayCuenta.Length == 1)
		{
			if (cuentaElegida != "" && catElegida != "")
			{
				categoriaFiltro = encontrarCategoria(catElegida, categorias);
				cuentaFiltro = encontrarCuentaAhorro(cuentaElegida, cuentas);
				listaGastos = controladorReporte.ReporteDeGastos(Persistencia.Id, categoriaFiltro, fechaInicio, fechaFin, cuentaFiltro);
			}
		} else
		{
			if (cuentaElegida != "" && catElegida != "")
			{
				string nroTarjeta = arrayCuenta[0];
				string banco = arrayCuenta[1];
				categoriaFiltro = encontrarCategoria(catElegida, categorias);
				cuentaFiltro = encontrarCuentaCredito(nroTarjeta, banco, cuentas);
				listaGastos = controladorReporte.ReporteDeGastos(Persistencia.Id, categoriaFiltro, fechaInicio, fechaFin, cuentaFiltro);
			}
		}

	}

	public AhorroDTO encontrarCuentaAhorro(string nombreCuenta, List<CuentaDTO> listaCuentas)
	{
		AhorroDTO cuentaRet = new AhorroDTO();
		foreach (CuentaDTO cuenta in listaCuentas)
		{
			if (cuenta is AhorroDTO)
			{
				if (((AhorroDTO)cuenta).Nombre == nombreCuenta)
				{
					cuentaRet = (AhorroDTO)cuenta;
				}
			}	
		}
		return cuentaRet;
	}

	public CreditoDTO encontrarCuentaCredito(string nroTarjeta, string bancoEmisario, List<CuentaDTO> listaCuentas)
	{
		CreditoDTO cuentaRet = new CreditoDTO();
		foreach (CuentaDTO cuenta in listaCuentas)
		{
			if (cuenta is CreditoDTO)
			{
				if ((((CreditoDTO)cuenta).NumeroTarjeta == nroTarjeta) && (((CreditoDTO)cuenta).BancoEmisor == bancoEmisario))
				{
					cuentaRet = (CreditoDTO)cuenta;
				}
			}
		}
		return cuentaRet;
	}

	public CategoriaDTO encontrarCategoria(string nombreCategoria, List<CategoriaDTO> listaCategorias)
	{
		CategoriaDTO categoriaRet = new CategoriaDTO();
		foreach (CategoriaDTO categoria in listaCategorias)
		{
			if (categoria.Nombre == nombreCategoria)
			{
				categoriaRet = categoria;
			}
		}
		return categoriaRet;
	}

	public CambioDTO encontrarCambio(TransaccionDTO transaccion, List<CambioDTO> listaCambios)
	{
		CambioDTO cambioDTO = new CambioDTO();
		foreach (CambioDTO cambio in listaCambios)
		{
			if (cambio.FechaDeCambio.Day == transaccion.FechaTransaccion.Day && cambio.FechaDeCambio.Month == transaccion.FechaTransaccion.Month && cambio.FechaDeCambio.Year == transaccion.FechaTransaccion.Year && cambio.Moneda.Equals(transaccion.Moneda))
			{
				cambioDTO = cambio;
			}
		}
		return cambioDTO;
	}


	protected override void OnInitialized()
	{
		catElegida = "";
		cuentaElegida = "";
		cambios = controladorCambios.CambiosDeEspacio(Persistencia.Id);
		categorias = controladorCategoria.CategoriasDeEspacio(Persistencia.Id);
		foreach(CuentaDTO cuentaDTO in controladorCuenta.CreditosDeEspacio(Persistencia.Id))
		{
			cuentas.Add(cuentaDTO);
		}
		foreach(CuentaDTO cuentaDTO in controladorCuenta.AhorrosDeEspacio(Persistencia.Id))
		{
			cuentas.Add(cuentaDTO);
		}
		listaGastos = new List<TransaccionDTO>(); ;
	}
}
