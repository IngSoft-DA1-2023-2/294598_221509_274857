@page "/home/{Id:int}/{Correo}/ReporteE"
@inject NavigationManager NavigationManager;
@using BussinesLogic
@using Domain
@inject UsuarioLogic UsuarioLogic;
@inject EspacioLogic EspacioLogic;
@inject Persistencia Persistencia;
@inject ControladorReporte controladorReporte;
@inject ControladorCambios controladorCambios;
@inject ControladorCuenta controladorCuentas;

<PageTitle>FinTrac Reportes</PageTitle>
<TituloRosado Titulo="Balance de Cuentas" Subtitulo=""></TituloRosado>

<div style="position:relative; right:5%;" class="mt-4">
	<div style="display:flex; flex-direction:column" class="mt-4">
		<div style="flex-grow: 1; padding-bottom:15px" class="flex flex-col space-y-2">
			<label for="cardSelector" class="text-sm font-medium text-gray-500">Seleccione una cuenta:</label>
			<select id="cardSelector" name="mes" @bind="cuentaActual">
				<option value="" selected>Seleccione una Opcion</option>
				@foreach (CuentaDTO account in cuentas)
				{
					@if (account is AhorroDTO)
					{
						<option value="@(((AhorroDTO)account).Nombre)"> @(((AhorroDTO)account).Nombre) - @(((AhorroDTO)account).Moneda) </option>
					}
				}
			</select>
		</div>
		<a style="position:relative; flex-grow:1; cursor:pointer; width:50%; left:23%; align-items:center; justify-content:center; display: flex; font-size: 25px" class="text-white bg-gradient-to-br from-pink-500 to-orange-400 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-pink-200 dark:focus:ring-pink-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2" @onclick="generarBalance">Calcular Balance</a>
	</div>
	@if (!cuentaEncontrada)
	{
		<div style="border: solid; border-color: #d4d4d4; width: 22.5%; border-radius:9px; position:relative; align-items:center; justify-content:center; left:37%">
			<h1 style="padding-left:6px">Seleccione una cuenta disponible.</h1>
		</div>
	}
	else
	{
		@if (!cuentaBalance.Moneda.Equals(TipoCambiarioDTO.PesosUruguayos))
		{
			<table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
				<thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
					<tr>
						<th scope="col" class="px-6 py-3">
							Nombre de Cuenta
						</th>
						<th scope="col" class="px-6 py-3">
							Balance Actual
						</th>
						<th scope="col" class="px-6 py-3">
							Moneda
						</th>
						<th scope="col" class="px-6 py-3">
							Valor moneda
						</th>
					</tr>
				</thead>
				<tbody>
					<tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
						<td class="px-6 py-4 font-medium text-gray-900 dark:text-white">@cuentaBalance.Nombre</td>
						<td class="px-6 py-4">
							@if (cambioActual.Pesos == 0)
							{
								@if (cuentaBalance.Moneda.Equals(TipoCambiarioDTO.Dolar))
								{
									<div>U$D @balanceCalculado</div>
								}
								else
								{
									<div>Є @balanceCalculado</div>
								}

							} else
							{
								<div>$ @balanceCalculado</div>
							}
						</td>
						<td class="px-6 py-4">@cuentaBalance.Moneda</td>
						<td class="px-6 py-4">
							@if (cambioActual.Pesos == 0)
							{
								<div>No hay un cambio disponible</div>
							} else
							{
								<div>$ @cambioActual.Pesos</div>
							}
						</td>
					</tr>
				</tbody>
			</table>
		}
		else
		{
			<table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
				<thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
					<tr>
						<th scope="col" class="px-6 py-3">
							Nombre de Cuenta
						</th>
						<th scope="col" class="px-6 py-3">
							Balance Actual
						</th>
						<th scope="col" class="px-6 py-3">
							Moneda
						</th>
					</tr>
				</thead>
				<tbody>
					<tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
						<td class="px-6 py-4 font-medium text-gray-900 dark:text-white">@cuentaBalance.Nombre</td>
						<td class="px-6 py-4">$ @balanceCalculado</td>
						<td class="px-6 py-4">@cuentaBalance.Moneda</td>
					</tr>
				</tbody>
			</table>
		}
	}
</div>


@code {
	[Parameter] public int Id { get; set; }
	[Parameter] public string Correo { get; set; }
	private string ErrorMsg { get; set; }
	private double gastosCategoria { get; set; }
	AhorroDTO cuenta { get; set; }
	private List<CuentaDTO> cuentas = new List<CuentaDTO>();
	private string cuentaActual { get; set; }
	private bool cuentaEncontrada = false;
	private AhorroDTO cuentaBalance { set; get; }
	private double balanceCalculado { set; get; }
	private CambioDTO cambioActual { get; set; }
	public List<CambioDTO> cambios = new List<CambioDTO>();

	private void generarBalance()
	{
		cuentaBalance = encontrarCuenta(cuentaActual, cuentas);
		if (cuentaBalance.Nombre != null)
		{
			cuentaEncontrada = true;
			//cuentaBalance = cuenta;
			EncontrarCambio(cuentaBalance);
			balanceCalculado = controladorReporte.BalanceDeCuentas(Persistencia.Id, cuentaBalance);
		}
		else
		{
			cuentaEncontrada = false;
		}
	}

	private AhorroDTO encontrarCuenta(string nombreCuenta, List<CuentaDTO> listaCuentas)
	{
		AhorroDTO cuentaRet = new AhorroDTO();
		foreach (CuentaDTO cuenta in listaCuentas)
		{
			if (cuenta is AhorroDTO)
			{
				if (((AhorroDTO)cuenta).Nombre == nombreCuenta)
				{
					cuentaRet = (AhorroDTO)cuenta;
				}
			}
		}
		return cuentaRet;
	}

	private void EncontrarCambio(AhorroDTO cuenta)
	{
		CambioDTO cambioRet = new CambioDTO();
		bool cambioEncontrado = false;
		foreach (CambioDTO cambio in cambios)
		{
			if (!cambioEncontrado && cuenta.Moneda.Equals(cambio.Moneda))
			{
				cambioEncontrado = true;
				cambioRet = cambio;
			}
		}
		cambioActual = cambioRet;
	}

	protected override void OnInitialized()
	{
		cuentaActual = "";
		cambios = controladorCambios.CambiosDeEspacio(Persistencia.Id);
		foreach (CuentaDTO cuentaDTO in controladorCuentas.AhorrosDeEspacio(Persistencia.Id))
		{
			cuentas.Add(cuentaDTO);
		}
	}
}
