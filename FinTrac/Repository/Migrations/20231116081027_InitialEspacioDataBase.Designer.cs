// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositorio;

#nullable disable

namespace Repositorio.Migrations
{
    [DbContext(typeof(FintracDbContext))]
    [Migration("20231116081027_InitialEspacioDataBase")]
    partial class InitialEspacioDataBase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoriaObjetivo", b =>
                {
                    b.Property<int>("CategoriasId")
                        .HasColumnType("int");

                    b.Property<int>("ObjetivosId")
                        .HasColumnType("int");

                    b.HasKey("CategoriasId", "ObjetivosId");

                    b.HasIndex("ObjetivosId");

                    b.ToTable("ObjetivoCategoria", (string)null);
                });

            modelBuilder.Entity("Dominio.Cambio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EspacioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaDeCambio")
                        .HasColumnType("datetime2");

                    b.Property<int>("Moneda")
                        .HasColumnType("int");

                    b.Property<double>("Pesos")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EspacioId");

                    b.ToTable("Cambio");
                });

            modelBuilder.Entity("Dominio.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EspacioId")
                        .HasColumnType("int");

                    b.Property<bool>("EstadoActivo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EspacioId");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("Dominio.Cuenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EspacioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("Moneda")
                        .HasColumnType("int");

                    b.Property<double>("Saldo")
                        .HasColumnType("float");

                    b.Property<string>("Tipo_cuenta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EspacioId");

                    b.ToTable("Cuenta");

                    b.HasDiscriminator<string>("Tipo_cuenta").HasValue("Cuenta");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Dominio.Espacio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Espacios");
                });

            modelBuilder.Entity("Dominio.Objetivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EspacioId")
                        .HasColumnType("int");

                    b.Property<double>("MontoMaximo")
                        .HasColumnType("float");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EspacioId");

                    b.ToTable("Objetivo");
                });

            modelBuilder.Entity("Dominio.Transaccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<int>("CuentaId")
                        .HasColumnType("int");

                    b.Property<int>("EspacioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaTransaccion")
                        .HasColumnType("datetime2");

                    b.Property<int>("Moneda")
                        .HasColumnType("int");

                    b.Property<double>("Monto")
                        .HasColumnType("float");

                    b.Property<string>("Tipo_Transaccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("CuentaId");

                    b.HasIndex("EspacioId");

                    b.ToTable("Transaccion");

                    b.HasDiscriminator<string>("Tipo_Transaccion").HasValue("Transaccion");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Dominio.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdEspacioPrincipal")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("EspacioUsuario", b =>
                {
                    b.Property<int>("EspaciosId")
                        .HasColumnType("int");

                    b.Property<int>("UsuariosInvitadosId")
                        .HasColumnType("int");

                    b.HasKey("EspaciosId", "UsuariosInvitadosId");

                    b.HasIndex("UsuariosInvitadosId");

                    b.ToTable("EspacioUsuario");
                });

            modelBuilder.Entity("Dominio.Ahorro", b =>
                {
                    b.HasBaseType("Dominio.Cuenta");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Ahorro");
                });

            modelBuilder.Entity("Dominio.Credito", b =>
                {
                    b.HasBaseType("Dominio.Cuenta");

                    b.Property<string>("BancoEmisor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCierre")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumeroTarjeta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Credito");
                });

            modelBuilder.Entity("Dominio.TransaccionCosto", b =>
                {
                    b.HasBaseType("Dominio.Transaccion");

                    b.HasDiscriminator().HasValue("TransaccionCosto");
                });

            modelBuilder.Entity("Dominio.TransaccionIngreso", b =>
                {
                    b.HasBaseType("Dominio.Transaccion");

                    b.HasDiscriminator().HasValue("TransaccionIngreso");
                });

            modelBuilder.Entity("CategoriaObjetivo", b =>
                {
                    b.HasOne("Dominio.Categoria", null)
                        .WithMany()
                        .HasForeignKey("CategoriasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Objetivo", null)
                        .WithMany()
                        .HasForeignKey("ObjetivosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dominio.Cambio", b =>
                {
                    b.HasOne("Dominio.Espacio", "Espacio")
                        .WithMany("Cambios")
                        .HasForeignKey("EspacioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Espacio");
                });

            modelBuilder.Entity("Dominio.Categoria", b =>
                {
                    b.HasOne("Dominio.Espacio", "Espacio")
                        .WithMany("Categorias")
                        .HasForeignKey("EspacioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Espacio");
                });

            modelBuilder.Entity("Dominio.Cuenta", b =>
                {
                    b.HasOne("Dominio.Espacio", "Espacio")
                        .WithMany("Cuentas")
                        .HasForeignKey("EspacioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Espacio");
                });

            modelBuilder.Entity("Dominio.Espacio", b =>
                {
                    b.HasOne("Dominio.Usuario", "Admin")
                        .WithMany("EspaciosAdmin")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Dominio.Objetivo", b =>
                {
                    b.HasOne("Dominio.Espacio", "Espacio")
                        .WithMany("Objetivos")
                        .HasForeignKey("EspacioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Espacio");
                });

            modelBuilder.Entity("Dominio.Transaccion", b =>
                {
                    b.HasOne("Dominio.Categoria", "CategoriaTransaccion")
                        .WithMany("Transacciones")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.Cuenta", "CuentaMonetaria")
                        .WithMany("Transacciones")
                        .HasForeignKey("CuentaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.Espacio", "Espacio")
                        .WithMany("Transacciones")
                        .HasForeignKey("EspacioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoriaTransaccion");

                    b.Navigation("CuentaMonetaria");

                    b.Navigation("Espacio");
                });

            modelBuilder.Entity("EspacioUsuario", b =>
                {
                    b.HasOne("Dominio.Espacio", null)
                        .WithMany()
                        .HasForeignKey("EspaciosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuariosInvitadosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dominio.Categoria", b =>
                {
                    b.Navigation("Transacciones");
                });

            modelBuilder.Entity("Dominio.Cuenta", b =>
                {
                    b.Navigation("Transacciones");
                });

            modelBuilder.Entity("Dominio.Espacio", b =>
                {
                    b.Navigation("Cambios");

                    b.Navigation("Categorias");

                    b.Navigation("Cuentas");

                    b.Navigation("Objetivos");

                    b.Navigation("Transacciones");
                });

            modelBuilder.Entity("Dominio.Usuario", b =>
                {
                    b.Navigation("EspaciosAdmin");
                });
#pragma warning restore 612, 618
        }
    }
}
