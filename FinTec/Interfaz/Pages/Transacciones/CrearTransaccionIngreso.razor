@page "/home/{Id:int}/{Correo}/CrearTransaccionIngreso"
@inject NavigationManager NavigationManager;
@using BussinesLogic
@using Domain
@inject UsuarioLogic UsuarioLogic;
@inject EspacioLogic EspacioLogic;
@inject Persistencia Persistencia;

<PageTitle>FinTec Transaccion</PageTitle>
<TituloRosado Titulo="Crear Transacción de Ingreso" Subtitulo="Cree transacciones de ingreso."></TituloRosado>
<EspacioActual></EspacioActual>

<p style="color:red">@ErrorMsg</p>


<form>
    <div class="form-group">
        <label for="titulo">Titulo:</label>
        <input type="text" class="form-control" id="titulo" @bind="Titulo">
    </div>

    <div class="form-group">
        <label for="monto">Monto:</label>
        <input type="number" class="form-control" id="monto" @bind="Monto">
    </div>

    <div class="form-group">
        <label for="categoria">Categoría:</label>
        <select class="form-control" @bind="categoriaSeleccionada">
            @foreach (Categoria categoria in EspacioLogic.FindEspacio(Persistencia.Id).Categorias)
            {
                if (categoria.Tipo == TipoCategoria.Ingreso && categoria.EstadoActivo)
                {
                    <option value="@categoria.Nombre">@categoria.Nombre</option>
                }
            }
        </select>

    </div>




    <div class="form-group">
        <label for="cuenta">Cuentas de credito:</label>
        <select class="form-control" @bind="cuentaCreditoSeleccionada">
            <option value="">-- Selecciona una opción --</option>
            @foreach (Credito cuentaCredito in EspacioLogic.FindEspacio(Persistencia.Id).Cuentas.Where(c => c is Credito))
            {
                <option value="@cuentaCredito.BancoEmisor">@cuentaCredito.BancoEmisor</option>
            }
        </select>
    </div>


    <div class="form-group">
        <label for="cuenta">Cuentas de ahorro:</label>
        <select class="form-control" @bind="cuentaAhorroSeleccionada">
            <option value="">-- Selecciona una opción --</option>
            @foreach (Ahorro cuentaAhorro in EspacioLogic.FindEspacio(Persistencia.Id).Cuentas.Where(c => c is Ahorro))
            {
                <option value="@cuentaAhorro.Nombre">@cuentaAhorro.Nombre</option>
            }
        </select>
    </div>


    <button type="button" class="btn btn-primary" @onclick="GenerarTransaccion">Crear Transacción</button>
</form>



@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public string Correo { get; set; }
    public string ErrorMsg { get; set; }
    private int IdCategoriaSeleccionada;
    private int IdCuentaSeleccionada;
    public Espacio espacioActual { get; set; }
    public Ahorro cuentaAhorro = new Ahorro();
    public Credito cuentaCredito = new Credito();
    private string Titulo;
    private double Monto;
    private Categoria categoria = new Categoria();
    string cuentaCreditoSeleccionada = "";
    string cuentaAhorroSeleccionada = "";
    string categoriaSeleccionada = "";
    TipoCambiario moneda;




    private void SeleccionarCuentaCredito(ChangeEventArgs e)
    {
        cuentaAhorroSeleccionada = e.Value.ToString();
        if (!string.IsNullOrEmpty(cuentaAhorroSeleccionada))
        {
            cuentaCredito = EspacioLogic.FindEspacio(Persistencia.Id).Cuentas.FirstOrDefault(c => c is Credito && ((Credito)c).BancoEmisor == cuentaCreditoSeleccionada) as Credito;
            cuentaCredito.BancoEmisor = cuentaCreditoSeleccionada;
        }
    }


    private void SeleccionarCuentaAhorro(ChangeEventArgs e)
    {
        cuentaAhorroSeleccionada = e.Value.ToString();
        if (!string.IsNullOrEmpty(cuentaAhorroSeleccionada))
        {
            cuentaAhorro = EspacioLogic.FindEspacio(Persistencia.Id).Cuentas.FirstOrDefault(c => c is Ahorro && ((Ahorro)c).Nombre == cuentaAhorroSeleccionada) as Ahorro;
            cuentaAhorro.Nombre = cuentaAhorroSeleccionada;
        }
    }





    private void GenerarTransaccion()
    {
        try
        {


            var nuevaTransaccion = new TransaccionIngreso();
            nuevaTransaccion.Titulo = Titulo;

            if (!string.IsNullOrEmpty(cuentaAhorroSeleccionada))
            {
                var cuentaAhorro = EspacioLogic.FindEspacio(Persistencia.Id).Cuentas.OfType<Ahorro>().FirstOrDefault(c => c.Nombre == cuentaAhorroSeleccionada);
                if (cuentaAhorro != null)
                {
                    nuevaTransaccion.Moneda = cuentaAhorro.Moneda;
                    nuevaTransaccion.CuentaMonetaria = new Ahorro
                        {
                            Nombre = cuentaAhorro.Nombre,
                            Moneda = cuentaAhorro.Moneda,
                            Monto = Monto
                        };
                }
            }
            else if (!string.IsNullOrEmpty(cuentaCreditoSeleccionada))
            {
                var cuentaCredito = EspacioLogic.FindEspacio(Persistencia.Id).Cuentas.OfType<Credito>().FirstOrDefault(c => c.BancoEmisor == cuentaCreditoSeleccionada);
                if (cuentaCredito != null)
                {
                    nuevaTransaccion.Moneda = cuentaCredito.Moneda;
                    nuevaTransaccion.CuentaMonetaria = new Credito
                        {
                            BancoEmisor = cuentaCredito.BancoEmisor,
                            Moneda = cuentaCredito.Moneda,
                            CreditoDisponible = Monto,
                            NumeroTarjeta = cuentaCredito.NumeroTarjeta
                        };
                }
            }
            if (!string.IsNullOrEmpty(categoriaSeleccionada))
            {
                categoria = EspacioLogic.FindEspacio(Persistencia.Id).Categorias.FirstOrDefault(c => c.Nombre == categoriaSeleccionada) as Categoria;
                categoria.EstadoActivo = true;
                categoria.Tipo = TipoCategoria.Ingreso;
                categoria.Nombre = categoriaSeleccionada;
            }

            nuevaTransaccion.CategoriaTransaccion = categoria;

            EspacioLogic.FindEspacio(Id).AgregarTransaccion(nuevaTransaccion);
            NavigationManager.NavigateTo($"/home/{Id}/{Correo}/Transacciones");

        }
        catch (DomainTransaccionException e)
        {
            ErrorMsg = e.Message;
        }
        catch (DomainCategoriaException e)
        {
            ErrorMsg = e.Message;
        }
        catch (DomainCuentaException e)
        {
            ErrorMsg = e.Message;
        }
        catch (Exception e)
        {
            ErrorMsg = e.Message;
        }
    }

}